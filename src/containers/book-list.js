// Render a list of booksReducer

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { selectBook } from '../actions/index';

// This is a function that we're going to use to make sure the action generated by the action creator flows through all the reducers
// Takes the return value from selectBook
import { bindActionCreators } from 'redux';

class BookList extends Component {

  renderList() {
    // The helper function will map over an array of books

    // For each book in the array, we create an li that contains the book's title
    return this.props.books.map((book) => {
      return (
        // Since it's a list, we need a key. Unique value for the key will be the title
        <li
          key={book.title}
          onClick={() => this.props.selectBook(book)}
          className="list-group-item">
          {book.title}
        </li>
      )
    });
  }

  render() {
    return (
      // Creates a ul, then calls a helper function called this.renderList()
      <ul className="list-group col-sm-4">
        { this.renderList() }
      </ul>
    )
  }
}

function mapStateToProps(state){
  // Whatever is returned from here, will show up as props inside of BookList
  return {
    // Whatever is contained in this object, will be set to equal this.props in the component
    books: state.books
    // This is the connection between redux and our container
  };
}

// Anything returned from this function will end up as props on the BookList container
function mapDispatchToProps(dispatch){
  // Whenever selectBook is called, the result should be passed to all of our reducers
  return bindActionCreators( { selectBook: selectBook }, dispatch);
}

// Takes a function and a component and creates a container
// Promotes BookList from a component to a container - it needs to know about this new dispatch method, selectBook.
// Makes it available as a prop

export default connect(mapStateToProps, mapDispatchToProps)(BookList);

// We're taking our React views and our Redux state to generate a useable application

// We want to promote one of these components to what we call a container
